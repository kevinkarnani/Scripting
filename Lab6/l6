Lab 6

1) Describing ADTs:
i) List: Linear recursive sequence of elements, cannot be indexed immediately, each element points to the next. Can be thought of as an ordered pair or nested duples.
ii) Stack: Linear recursive sequence of elements. The element last inserted will be the first element to be removed (LIFO).
iii) Queue: Linear recursive sequence of elements. The element first inserted will be the first element to be removed (FIFO).
iv) Dictionary: A set of (key, value) pairs. A key can only have a single value. Values can be accessed by indexing the dictionary with a key.

2) log2(n). This is because for n elements, log2(n) comparisons are made if the element is not in the list.

3) n. This is because in the worst case scenario, you will have to traverse the entire list and not find the element.

4) Binary search requires an ordered list. So, if a list is unsorted and only needs to be sorted once, it will be faster to use linear (n) over binary (nlog2(n)) search.

5) Quicksort:
i) *84* 37 93 82 98 27 63 73 93 27 75 55 45 8
ii) (*37* 82 27 63 73 27 75 55 45 8) 84 (*93* 98 93)
iii) ((*27* 27 8) 37 (*82* 63 73 75 55 45)) 84 93 93 98
iv) (*8* 27) 27 37 (*63* 73 75 55 45) 82 84 93 93 98
v) 8 27 27 37 (*55* 45) 63 (*73* 75) 82 84 93 93 98
vi) 8 27 27 37 45 55 63 73 75 82 84 84 93 93 98

6) It builds a linked list L such that L is "06"->"24"->"3".

7) It builds a Scheme-style list L such that L is [24, [13, [28, [3, None]]]]

8) The outputs differ because, while s and buffer shared the same memory location initially, s gets moved to a different location and is assigned a new value.

9) Hash Table:

Hash      |     Values
--------------------------------------------------------------
3         |     [Bob, 38], [Cos, 96]
4         |     [Vera, 99], [Nash, 11], [Kate, 28], [Jaga, 24]
5         |     [Jesse, 78]

10) Find function:

# table, TABLE_SIZE, and hash() defined in hash.c
int find(char *key, int *p_ans) {
	key = hash(key)
	for(int i = 0; i < TABLE_SIZE; i++) {
		if (key == table[i] -> key) {
			*p_ans = table[i] -> key
			return 1;
		}
	}
	return 0
}
